pipeline {
    agent any
    environment {
        SONAR_HOME = 'C:\\Users\\Administrator\\Desktop\\Narayanan-apps\\tools\\sonar-scanner-cli-7.1.0.4889-windows-x64\\sonar-scanner-7.1.0.4889-windows-x64\\bin'
        REPO_NAME='https://github.com/NarayananDurai07/html-sample-app.git'
        BRANCH_NAME ='master'
        SONAR_TOKEN= credentials('Narayanan_SQ_Token_Day3')
        SONAR_PROJECT_KEY =  'Narayanan_scan2'
        SONAR_SERVER_NAME = 'MYSQ_Server' // name we have configured under jenkins global confir
        DOCKER_CRED= 'narayanan_docker_hub'
        TRIVY_REPORT='report.txt'
        IMAGE_NAME='docker.io/narann/hello-world'
        IMAGE_TAG='narayanv1'
    }

    stages {   
         // stage1
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }    
        // stage to verify sonar-scanner 
        stage('sonar-scaner verify'){
             steps {
                echo 'checking version'
                // bat or pwsh
                //%SONAR_HOME%\\
                bat """
                C:\\Users\\Administrator\\Desktop\\Narayanan-apps\\tools\\sonar-scanner-cli-7.1.0.4889-windows-x64\\sonar-scanner-7.1.0.4889-windows-x64\\bin\\sonar-scanner --version
                docker version
                java --version 
                """
            }
         }
         stage("git checkout")
         {
            steps{
                echo 'Git checkout'
                git url: "${REPO_NAME}", branch: "${BRANCH_NAME}"
            }
         }
         stage('SAST'){
            steps{
                echo 'SAST'
                script {
                    withSonarQubeEnv("${SONAR_SERVER_NAME}") {
                
                    bat """
                    %SONAR_HOME%\\sonar-scanner \
                    -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=${SONAR_HOST_URL} \
                    -Dsonar.token=${SONAR_TOKEN}
                    """

                    }                
                }
            }
         }
          // using docker plugin to build container image 
        stage('building docker image'){
            steps {
                echo 'starting docker build process'
                // to use docker plugin using script 
                script {
                    def imageName  = "docker.io/narann/narayananwebapp-iis-ltsc2022"
                    def imageTag   = "codev1"
                    docker.build("${imageName}:${imageTag}",".")

                }
                // verify image build 
                bat 'docker images   | findstr narayananwebapp'
            }               
            
        }
        stage('trivy scan'){
            steps {
                echo 'running scan'
                bat """
                C:\\Users\\Administrator\\Desktop\\Narayanan-apps\\tools\\trivy_0.64.1_windows-64bit\\trivy.exe image ${IMAGE_NAME}:${IMAGE_TAG} --severity HIGH,CRITICAL --format table --report summary -o ${TRIVY_REPORT} --skip-version-check 
                findstr /I "HIGH CRITICAL"  ${TRIVY_REPORT}  >null

                if %errorlevel% == 0 (
                echo [ERROR] HIGH or ciritical found 
                exit /b 1
                )  
                else (
                echo no error found 
                )
                """
            }
        }
         stage('Pushing docker image'){
            steps{
                echo ' docker image'

                script{
                    def imageName = "narann/narayananwebapp-iis-ltsc2022"
                    def imageTag = "codev1"
                    def hubcred = "${DOCKER_CRED}"
                    // calling jenkins pluing docker pipeline to push
                    docker.withRegistry('https://registry.hub.docker.com',hubcred){
                        docker.image(imageName + ":" + imageTag).push()
                        // 
                    }
                    bat 'docker images | findstr narayananwebapp'
                }
            }
         }
         stage('deploy app via container'){
            steps{
                echo 'deploy'
                bat """
                 docker rm narayananappc1 -f  >null 2>&1 || echo COntainer found found 
                docker  run -itd --name narayananappc1 -p 1234:80  ${IMAGE_NAME}:${IMAGE_TAG}
                docker  ps | findstr narayananappc1 
                """
            }
         }
    }
}